Twitter (9/21)
12	Integer to Roman	38.8%	Medium	
235	Lowest Common Ancestor of a Binary Search Tree	37.7%	Easy	
20	Valid Parentheses	29.4%	Easy	
206	Reverse Linked List	39.4%	Easy	
161	One Edit Distance 	28.4%	Medium	
10	Regular Expression Matching	22.0%	Hard
23	Merge k Sorted Lists	23.4%	Hard
56	Merge Intervals	25.3%	Hard
208	Implement Trie (Prefix Tree)	25.3%	Medium



202	Happy Number	36.5%	Easy	
118	Pascal's Triangle	33.4%	Easy	
251	Flatten 2D Vector 	33.9%	Medium	
43	Multiply Strings	23.5%	Medium	
60	Permutation Sequence	25.1%	Medium		
146	LRU Cache	15.8%	Hard	
269	Alien Dictionary 	23.0%	Hard	
140	Word Break II	19.8%	Hard	
296	Best Meeting Point 	46.7%	Hard	
42	Trapping Rain Water	32.2%	Hard	
149	Max Points on a Line	14.2%	Hard			
218	The Skyline Problem	22.0%	Hard



// Problem
// "I want you to write a function that takes an unsorted array of longs which has the following properties: 
// the array is always of odd length and all the values in the array appear an even number of times except one value.  
// The function should return the value that appears the odd number of times." 

// Example Arrays: 
//   [1, 3, 3, 3, 3, 1, 9, 9, 100, 12, 100] (12 appears once)
//   [1] (1 appears once)
//   [2, 2, 2] (2 appears 3 times)
//   [1, 1, 1, 1, 3, 3, 3] (3 appears 3 times)

//a xor a == 0

public long findOddNum(long[] nums) {
    
    long result = 0;
    for (int i = 0; i < nums.length; i++) {
        
        long num = nums[i];
        result = result ^ num;
        
    }
    return result;
    
}

public long findOddNumII(long[] nums) {
    long result = 0;
    HashMap<Long, Integer> map = new HashMap<Long, Integer>();
    for (int i = 0; i < nums.length; i++) {
        long num = nums[i];
        if (!map.containsKey(num)) {
            map.put(num, 1);
        } else {
            map.put(num, map.get(num) + 1);
        }
        
    }
    Iterator<Long> iterator = map.keySet().iterator();
    while (iterator.hasNext()) {
        long key = iterator.next();
        int times = map.get(key);
        if (times % 2 == 1) {
            return key;
        }
        
    }
    return -1;
    
}