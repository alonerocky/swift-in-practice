Uber (8/41)
4	Median of Two Sorted Arrays	18.5%	Hard ====			
140	Word Break II	19.7%	Hard
			

291	Word Pattern II 	35.1%	Hard
78	Subsets	31.3%	Medium
254	Factor Combinations 	35.0%	Medium
202	Happy Number	36.8%	Easy 
186	Reverse Words in a String II 	29.0%	Medium
290	Word Pattern 	29.4%	Easy
8	String to Integer (atoi)	13.5%	Easy	
337	House Robber III 	37.2%	Medium				
155	Min Stack	22.0%	Easy
39	Combination Sum	31.1%	Medium
139	Word Break	25.5%	Medium
230	Kth Smallest Element in a BST	38.0%	Medium
91	Decode Ways	17.6%	Medium
249	Group Shifted Strings 	31.6%	Easy
266	Palindrome Permutation 	50.6%	Easy
242	Valid Anagram	42.1%	Easy	
13	Roman to Integer	39.7%	Easy		
171	Excel Sheet Column Number	42.0%	Easy	
121	Best Time to Buy and Sell Stock	36.2%	Easy	
104	Maximum Depth of Binary Tree	48.0%	Easy	
36	Valid Sudoku	30.8%	Easy		
125	Valid Palindrome	23.9%	Easy
206	Reverse Linked List	39.8%	Easy	
24	Swap Nodes in Pairs	35.4%	Easy	
1	Two Sum	23.5%	Easy	
22	Generate Parentheses	37.3%	Medium		
208	Implement Trie (Prefix Tree) 	25.3%	Medium	
49	Group Anagrams	27.7%	Medium	
54	Spiral Matrix	22.7%	Medium		
133	Clone Graph	24.9%	Medium	
161	One Edit Distance 	28.5%	Medium	
17	Letter Combinations of a Phone Number	28.9%	Medium	
138	Copy List with Random Pointer	26.1%	Hard	
146	LRU Cache	15.8%	Hard	
37	Sudoku Solver	25.1%	Hard	
23	Merge k Sorted Lists	23.6%	Hard		
297	Serialize and Deserialize Binary Tree 	28.0%	Hard	
33	Search in Rotated Sorted Array	30.4%	Hard	
10	Regular Expression Matching	22.1%	Hard
76	Minimum Window Substring	21.4%	Hard


-------------CareerCup
(1) Design a hashMap in Java. Implement put, get, remove, resize methods.

(5)
Given a string s and a dictionary of words dict, determine if s can be segmented into a space-separated sequence of one or more dictionary words. 

For example, given 
s = "leetcode", 
dict = ["leet", "code"]. 

Return true because "leetcode" can be segmented as "leet code".

(8)
For a given string and dictionary, how many sentences can you make from the string, such that all the words are contained in the dictionary. 

// eg: for given string -> "appletablet" 
// "apple", "tablet" 
// "applet", "able", "t" 
// "apple", "table", "t" 
// "app", "let", "able", "t" 

// "applet", {app, let, apple, t, applet} => 3 
// "thing", {"thing"} -> 1

(6)
LRU Cache

(12)
Given a character limit and a message, split the message up into annotated chunks without cutting words as, for example when sending the SMS "Hi Sivasrinivas, your Uber is arriving now!" with char limit 25, you should get 
["Hi Sivasrinivas,(1/3)", "your Uber is arriving(2/3)", "now!(3/3)"]

(13)
Serialize & Deserialize a binary tree

(14)
Add a third dimension of time to a hashmap , so ur hashmap will look something like this - HashMap<K, t, V> where t is a float value. Implement the get and put methods to this map. The get method should be something like - map.get(K,t) which should give us the value. If t does not exists then map should return the closest t' such that t' is smaller than t. For example, if map contains (K,1,V1) and (K,2,V2) and the user does a get(k,1.5) then the output should be v1 as 1 is the next smallest number to 1.5

--------------------------------------


 

(7)
WAP to take one element from each of the array add it to the target sum. Print all those three-element combinations. 

/* 
A = [1, 2, 3, 3] 
B = [2, 3, 3, 4] 
C = [1, 2, 2, 2] 
target = 7 
*/ 

Result: 
[[1, 2, 4], [1, 3, 3], [1, 3, 3], [1, 3, 3], [1, 3, 3], [1, 4, 2], [2, 2, 3], [2, 2, 3], [2, 3, 2], [2, 3, 2], [3, 2, 2], [3, 2, 2]]



(9)
Given string a and b, with b containing all distinct characters, find the longest common subsequence's 

length. Expected complexity O(nlogn).



(10)
Given a 4*n block, find number of different ways of filling it with 1*2 smaller blocks. Rotation of smaller blocks is allowed.



(11)
Given an array of numbers, for every index i, find nearest index j such that a[j] > a[i].If such an index doesn’t exist for i, ­1 should be printed.




(2)
1) Narrate an instance you optimized or improved a software design. 
2) Given a chance how would you re-think some of the design aspects?
 


(3)
Design a Twitter feeds API. How would you actually connect it from a mobile? What happens behind the Twitter network? how do the Trends get published? From where does Twitter get the information for a particular trend(Eg: #Obama, #nfl) and publish it out? What protocol does it use? How do you connect to Twitter API? How does Twitter handle multiple connections?
 

(4)
1) Describe your most proudest project, least proudest project 
2) Most inpiring teammate, what did he do? 
3) Most awesome manager? Why was he so good?

(15)
Design a ride sharing application



-------------------------------Glassdoor
Done------------------------
1. Binary tree serialization/deserialization

(44) Implement an LRU cache.

Write an algorithm to determine if all of the delimiters in an expression are matched and closed.{(abc)22}[14(xyz)2] should pass
[ { ] } should fail
{ (x) } [ should fail  

(4) Given a message "one two three four five six seven eight nine", chop it in chunks(no exceed the give buffer size) and print out to the screen. Need to maintain the word and do not chop it off.
I.E.: buffer size is 15
one two three (1/4)
four five six (2/4)
seven eight (3/4)
nine (4/4)  


(10) please construct a hash map  

(11) Computer a^b 

(19) /*
Some examples:
isMatch(“aa”,”a”) ? false
isMatch(“aa”,”aa”) ? true
isMatch(“aaa”,”aa”) ? false
isMatch(“aa”, “a*”) ? true
isMatch(“aa”, “.*”) ? true
isMatch(“ab”, “.*”) ? true
isMatch(“aab”, “c*a*b”) ? true

Write isMatch()

*/  

(25) Reverse words in string.

(26) Search a target number in a Rotated Sorted Array.  

(27) Finding kth smallest element in a BST  
---------------------------
(1) Interview Questions
how to implement Uber pool. given two trips find and algorithm to see if they should be pooled  

(2)  
2. Uber Pool System design (walk from signup process to how to get the nearest drivers)
3. Find overlapping meeting times
4. Implement autocomplete system  

(3)Interview Questions
Write an algorithm to determine how similar/different two strings are. I was able to interpret this question any way I wanted. (percentage difference, character difference)  
Answer Question

Working together to design an elevator with the interviewer.  
Answer Question

 

(5) Distance between siblings in trees, basic SQL queries.  

(6) Design a streaming service 

(7)string manipulation 

(8)System architecture, two data structure + algorithms, and one culture fit w/ an engineering manager. 

(9) Data structure question of getting a random entry from a collection in constant time 

 

(12)
Why Uber. Design the backend architecture to show nearby drivers. 

(13)
Write a code to construct a tree. It should get a string and generate related tree. 

(14) Given a set of sudoku boards, determine whether a board is valid or not.  

(15) The one about API rate throttler, mentioned in one of the glassdoor posts.  

(16) A file contains strings like abcd 3.0 xyx 4.0 foobar 5.0 return random string but probability should be based on weighted average 

(17) Implement a timer using queue. 

(18) find the kth smallest element of a BST. What are the purposes of a heap.  

 

(20) Find the maximum number in an array

(21) Given a text message and max number of characters, implement how the phone company can represent a given message.  

(22) Code secret santa 

(23) Implementing the substring method 

(24) https://www.glassdoor.com/Interview/Uber-Software-Engineer-Interview-Questions-EI_IE575263.0,4_KO5,22_IP5.htm

(Easier) You have a sorted array of integers. Find the element where the array index is equal to the value of the corresponding element. Or return that no such element exists.  
1 Answer
(Harder) You have a dictionary of words. Create a matrix of letters such that each row of the matrix is a word and each column of the matrix is a word. Kind of like a very dense crossword puzzle.  
1 Answer


 

(28) What's the difference between BST and heap, what's big endian, little endian, how do you know which process takes up the most resources in Linux, etc.  

(30) 1. Say there are a bunch of records (either photos/news feed/videos) to be displayed as feed on a mobile app, how would you improve the performance of such an interface
2. Implement bus event design pattern  

(31) Implement a map data structure using a binary search tree. It should have the functions Get, Set, and Size.  
(32) Search and delete nodes in BST. Delete operation is pretty tricky and you should review that. 

(33) Reverse a string.

(34) Lowest common ancestor in BST  

(35) Given a restaurant menu and a budget, output all the possible ways to use up the budget. 

(36) Pig Latin encoding..maybe he intended to ask decoding as well but I never got there 

(37) Code an algorithm that tests spaces on a chessboard.  

(38) print out a multiplication table ie. 1 x1 to 12 x12  
Answer Question
Using OOP design a elevator.  

(39) How would you design a spreadsheet application?  

(40) write code to print the matrix from outside to inside.  

(41) Create a Json like object to representation and implement a flatten method to return string-&gt; string mapping. (implement from scratch / test / compiling + working code)

{x:1, y:1, z:{a:1,b:2}} flattens to {x:1, y:1, z.a:1, z.b: 2}  
Answer Question
Q2. Implement a rate limiter attribute/decoration/annotation on top of an API endpoint. caps to N requests per minute with a rolling window (implement from scratch / test / compiling + working code)  


(42) Given a list of words, find whether a new word is anagram of word in list.  

(43) Input a string and output the number of words (need to run on coderpad)  

 

(45) Using Object Oriented Design principles, design a method to check if a Sudoku board is valid (skeleton code was provided which was initially passed in through a 2-d array).  

(46) Reversing a linked list, Implementing a rate limiter for a web service.  

(47) A classic permutation questions. Followed by the question if duplicates exist.  

(48) Write a spreadsheet engine in the language of my choice.  

(49) Implement boggle  
http://www.geeksforgeeks.org/boggle-find-possible-words-board-characters/
http://stackoverflow.com/questions/746082/how-to-find-list-of-possible-words-from-a-letter-matrix-boggle-solver

(50) Design a price surge system, both at a high level and the architecture 

(51) Implement LRU cache with get and set operations in constant time O(1).  
1 Answer
Given a regular expression pattern and a string, check to see if pattern matches the string.  
2 Answers

(52) Design a distributed system for sorting of large files.  

(53) 1. Segment Tree;
2. How to diagnose latency in data center;  

(54) Print all permutations of 3 pair of parens. ()()(), (()()), (())(),,,. etc  
Answer Question
Live-coding on a page that searches for images on flickr/google API via ajax and populates it using js.  

(55) Build a simplified YELP-like service.  

(56) My coding challenge had to calculate the nearest transit stop given your current location. They asked for an efficient way to do this. The answer ended up being something I was not familiar with, Mongo DB and such database geo location built in functions.  

(57) Find the longest word in a grid of random letter, each consecutive letters has to be next to the previous one.  

(58) There is a notepad which accepts only four operations:
1. Character X
2. select all
3. copy
4. paste
Given n number of operations, provide the sequence of choices that gives maximum characters in the notepad. 

(59)


--------------1point3acres

done
(2)
Weight Random Character，输入e.g. data = [{label: 'A', weight: 2}, {label: 'B', weight: 3}, {label: 'C', weight: 5}]，实现randLabel(data)，按权重随机输出label（'A'，'B'或'C'，'A'的可能性为20%，'B'为30%，'C'为50%） Follow up：如何优化？
(5)
设计一个数据结构，要求能够实现key，timestamp，val的配对，用一个map，加一个bst就可以，java有现成的treemap，写了之后测试了几个case就结束了

(6)
给一个 words = , 一个 weights = 然后写一个function按照对应的weight来生成 word 比如如果生成600次，a 大致出现100次，b 大致200次， c大致300次 做完之后他再让你生成n次再统计输出一下结果

(7)
第一轮是大概是这样的，计算calculator，比如说计算：　１＋２*３/4, follow-up (1+2)*3 - 4*(5-8)这样的。需要写完，并且加些test　cases 
--------------------
(1) validate sudoku
API limiter  (Tokenbucket) 
leetcode 120 triangle
tree width
design uber

 

(3)
LC 原题Combination Sum 基本一样，小区别是 输入不是单纯数字 是 Burger:$3 , Shake:$2, Fries: $2 这样的 输入 价格加起来等于target 的所有 String Combination 比如target=10这个就有 [, ,……] 新建个class包含price 和name 就好 基本一样，所以还好不算很难··· 但是我不想一步到位就答案还存在duplicate， 我想再改小哥就说不改了··· 问问题吧···· 哭····· 虽然感觉自己给我onsite也是最后渺茫，但还是求个Onsite！！

(4) tree traversal
我们做第二题，输入是一串硬币价值和一个金额，问有多少种取法可以达到这个金额
设计deck这个类，要求4种花色的牌各13张，第一个任务要求print，第二个任务是shuffle。我说了一下想法，大概10多分钟做完了

设计一个facebook messenger

一道rotated sorted array，找最小值。我说用binary search，然后没考虑mid是最小值的情况，加上后很快做完了。然后大哥说你设计个data structure，要求满足get(key),put(key,value),getlatest()都是O（1）



(7)
第二轮是string　isomophic；follow　up是把能够是isomophic　strings　group到一起（类似与leetcode　的　group　shifted　string） 第三轮是hiring manager, lots of behavior questions, and one algo, sudoku solver 第四轮是hiring　manager（之前安排好的interviewer临时有事情）, lots of behavior questions, plus one algo question. assuming a list of words appear with a given probability: example (hello, 0.2), (world, 0.3), (ok, 0.5). now generate a word according to thir probability(use binary search) 第五轮是设计问题。

(8)
一个sentence，一个book， 返回是否所有的sentence里的char都在book出现过。 首先装笨暴力解了，然后要求优化，把book做成了hashmap。 然后又问如果所有character都在第二页，没必要建map，怎么优化。这里有点卡，我直接说的把sentence做成multiset, 然后遍历book, sentence空了就直接返回true. 感觉不是他要的，但是已经超时了，楼主就问了这个解法你满意吗，答曰这个问题有很多种解法就挂了。

(9)
第一题是mirror BST 第二题是 The matching should cover the entire input string (not partial). The function prototype should be: bool isMatch(String str, String patter) Some examples: isMatch("aa","a") → false isMatch("aa","aa") → true isMatch("aaa","aa") → false isMatch("aa","a{1,3}") → true isMatch("aaa","a{1,3}") → false isMatch("ab","a{1,3}b{1,3}") → true isMatch("abc","a{1,3}b{1,3}c") → true isMatch("abbc","a{1,3}b{1,2}c") → false isMatch("acbac","a{1,3}b{1,3}c") → false isMatch("abcc","a{1,3}b{1,3}cc{1,3}") → true 

(10)
anagram
RateLimiter

(11)
next permutation

(12)
Rotated array find minimum

merge linkedlist in-place + remove duplicate

design uber

(13)
OO Design. 设计Excel

System Design. 设计Instagram
给一个linked list, 返回一个reversed copy

(14) 
第一道是给一个32位的int数，你判断它的2进制表示是否是palindrome,我自己是高位和地位两边一起移动看收尾字符是否是相同的，后来网上有大牛说可以做查询表或者把低16位翻转，左移16位，然后和高16位比较是否一样。 2。给你k个sorted的数组，每个有n个元素，这个n可以非常大，请问怎么把他们放到一个数组并从大到小排序排好。



(15)
Given a balanced binary tree, counter clock-wise plot the tree node on the boundary. For example 5 4 8 1 3 2 6 3 1 9 2 7 5, 4, 1, 3, 1, 9, 2, 7, 6, 8 

(16)
Round4：国人大哥，obj1 = {a: 1, b: 2, c: {d: 3}}，obj2 = {b: ‘a’, c: {d: 4}}，写一个递归函数merge(obj1, obj2)，合并后的结果为{a: 1, b: , c: {d: }} Round5: 三哥director，behavior，有n个cityLog，里面的包含各个城市各个时间点的车辆的数量，比如cityLog1 = ，cityLog2 = ，写function输出各个时间点车辆数量总和, total = ，没想出什么太优化的方案，三层for循环brute force

(17)
电面：在线code，一个小时。一个2d grid，由0和1组成。从某一个1开始，计算由相邻的1构成的区域的面积。 比如： 00100 01101 00100 11110 从第2行第3列的那个1开始计算，最后结果应该是8。也就是左边那些互相连接起来的1构成的面积。 我用BFS算的。似乎也可以用UF。 Follow up：接上题，将每一个grid看成边长为1的正方形，计算上述区域的周长。 其实在上一题的BFS算法基础上略作修改即可。 

On site：4轮，每轮45分钟或一个小时。第2、3轮之间有15分钟break。需自备电脑。最好能连接大屏幕。我的电脑接不上大屏幕，于是有两轮是白板，有两轮是面试官站在身后看着我写。 每一轮面试官会自我介绍，然后你自我介绍（同样的话说四遍……）。其中几位面试官会问一点“为什么想来Uber”之类behavior questions。每轮结束前会有给你的提问时间。 （其中一位面试官说Uber修改了new grad的面试流程，不问system design了，改问一种叫problem solving的问题，即第四轮。不过我觉得第二轮问的问题还是略偏系统设计类一点。） 第一轮，算法。Leetcode第23题。Merge k个 sorted lists。要说出时间复杂度。要给出最佳算法，即O(N · logK)的算法，N是总整数数量，K是list数量。 第二轮，hiring manager，也是日后入职后的manager。问题是：用户打开Uber后，在“点击用车”旁边显示的“x分钟”（即附近的车最快前来接人的时间）应该如何实现。实质就是如何估算两个地点之间的行驶时间，以及如何优化。可以获取的data是“每一段街道当下的交通状况”。回答过程中被问到的一些关键性问题包括：如何定义“地点”、“路程”等；如何处理“地理距离近但实际用时长”的问题；如何利用缓存；缓存的大小估算；考虑上下班时段等模式问题；考虑车祸等突发情况。需要不断和面试官沟通来推进你的回答。 第三轮，实际coding。Leetcode第10题。正则表达式匹配检验。Pattern中可能包含“*”（任意数量的前一位字符）和“.”（任意一个字符）。自己写测试用例运行。会问复杂度。 第四轮，problem solving，题目不详细描述了。其实和前面一样，写出代码来解决一个问题。侧重点是思路、正确性证明、复杂度，不太侧重优化。最后自己写测试用例运行。 

(18)
第一轮，国人大哥，问了一些经验以后开始上题，找到一个rider附近最近的几个driver。个人感觉就是相当于找一个平面上离原点最近的k个点。写了一个quick select。 第二轮，两个国人大哥，问了leetcode原题Minimum Size Subarray Sum，回来看了一下貌似连例子都和leetcode上面一样…. 第三轮，一个三姐，问了一些项目的细节，然后就是给一个boolean矩阵matrix，如果matrix为false说明这个点不能走，否则就可以走。给一个起始点和结束点，输出他们之间的最短路径。感觉也没什么难的。 第四轮，和manager聊天，问了很多behavior question。没有把他哄开心，聊完让我随便设计了一下excel就走了。 第五轮，system design，让设计一个service可以检测一个data center里host的状态。提出了各种场景，还是很考验基本功的。





